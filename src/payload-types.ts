/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    documents: Document;
    promises: Promise;
    media: Media;
    pages: Page;
    users: User;
    'site-settings': SiteSetting;
    tenants: Tenant;
    partners: Partner;
    'political-entities': PoliticalEntity;
    'promise-status': PromiseStatus;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    promises: PromisesSelect<false> | PromisesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    partners: PartnersSelect<false> | PartnersSelect<true>;
    'political-entities': PoliticalEntitiesSelect<false> | PoliticalEntitiesSelect<true>;
    'promise-status': PromiseStatusSelect<false> | PromiseStatusSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Setting;
    'payload-jobs-stats': PayloadJobsStat;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
    'payload-jobs-stats': PayloadJobsStatsSelect<false> | PayloadJobsStatsSelect<true>;
  };
  locale: 'en' | 'fr';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      createTenantFromAirtable: TaskCreateTenantFromAirtable;
      fetchAirtableDocuments: TaskFetchAirtableDocuments;
      downloadDocuments: TaskDownloadDocuments;
      extractDocuments: TaskExtractDocuments;
      extractPromises: TaskExtractPromises;
      uploadToMeedan: TaskUploadToMeedan;
      createPoliticalEntity: TaskCreatePoliticalEntity;
      fetchPromiseStatuses: TaskFetchPromiseStatuses;
      updatePromiseStatus: TaskUpdatePromiseStatus;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: {
      airtableWorkflow: WorkflowAirtableWorkflow;
      meedanStatusesWorkflow: WorkflowMeedanStatusesWorkflow;
    };
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: string;
  title: string;
  url?: string | null;
  docURLs?:
    | {
        url: string;
        id?: string | null;
      }[]
    | null;
  files?: (string | Media)[] | null;
  politicalEntity?: (string | null) | PoliticalEntity;
  language?: ('en' | 'fr') | null;
  type?: ('promise' | 'evidence') | null;
  airtableID?: string | null;
  fullyProcessed?: boolean | null;
  extractedText?:
    | {
        text?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "political-entities".
 */
export interface PoliticalEntity {
  id: string;
  tenant?: (string | null) | Tenant;
  name: string;
  slug: string;
  slugLock?: boolean | null;
  region?: string | null;
  /**
   * Title of the entity, i.e President, Governor, Prime Minister
   */
  position: string;
  /**
   * Image of the Political Entity
   */
  image: string | Media;
  periodFrom: string;
  periodTo: string;
  airtableID?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: string;
  name: string;
  locale: 'en' | 'fr';
  country:
    | 'DZA'
    | 'AGO'
    | 'BEN'
    | 'BWA'
    | 'IOT'
    | 'BFA'
    | 'BDI'
    | 'CPV'
    | 'CMR'
    | 'CAF'
    | 'TCD'
    | 'COM'
    | 'COG'
    | 'COD'
    | 'CIV'
    | 'DJI'
    | 'EGY'
    | 'GNQ'
    | 'ERI'
    | 'SWZ'
    | 'ETH'
    | 'ATF'
    | 'GAB'
    | 'GMB'
    | 'GHA'
    | 'GIN'
    | 'GNB'
    | 'KEN'
    | 'LSO'
    | 'LBR'
    | 'LBY'
    | 'MDG'
    | 'MWI'
    | 'MLI'
    | 'MRT'
    | 'MUS'
    | 'MYT'
    | 'MAR'
    | 'MOZ'
    | 'NAM'
    | 'NER'
    | 'NGA'
    | 'REU'
    | 'RWA'
    | 'SHN'
    | 'STP'
    | 'SEN'
    | 'SYC'
    | 'SLE'
    | 'SOM'
    | 'ZAF'
    | 'SSD'
    | 'SDN'
    | 'TZA'
    | 'TGO'
    | 'TUN'
    | 'UGA'
    | 'ESH'
    | 'ZMB'
    | 'ZWE';
  airtableID?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promises".
 */
export interface Promise {
  id: string;
  title?: string | null;
  document: string | Document;
  extractions?:
    | {
        category: string;
        summary: string;
        source: string;
        uniqueId?: string | null;
        checkMediaId?: string | null;
        checkMediaURL?: string | null;
        Status?: (string | null) | PromiseStatus;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Status from CheckMedia
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promise-status".
 */
export interface PromiseStatus {
  id: string;
  label: string;
  meedanId: string;
  description: string;
  colors?: {
    color?: string | null;
    textColor?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  tenant?: (string | null) | Tenant;
  title: string;
  slug: string;
  slugLock?: boolean | null;
  blocks?:
    | (
        | ActNowBlock
        | {
            image: string | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'newsletter';
          }
        | {
            title: string;
            partners?: (string | Partner)[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'partners';
          }
        | KeyPromises
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ActNowBlock".
 */
export interface ActNowBlock {
  logo: string | Media;
  description: string;
  image: string | Media;
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    url?: string | null;
    label: string;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'act-now';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners".
 */
export interface Partner {
  id: string;
  name: string;
  image: string | Media;
  links?:
    | {
        platform: 'Facebook' | 'Twitter' | 'Instagram' | 'Linkedin' | 'Github' | 'Slack';
        url: string;
        id?: string | null;
      }[]
    | null;
  url: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    url?: string | null;
    label: string;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KeyPromises".
 */
export interface KeyPromises {
  title: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'key-promises';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  tenants?:
    | {
        tenant: string | Tenant;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: string;
  tenant?: (string | null) | Tenant;
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Shown on main navigation bar.
   */
  primaryLogo: string | Media;
  /**
   * Shown on main footer. If not provided, primary logo will be reused.
   */
  secondaryLogo: string | Media;
  /**
   * Shown on secondary footer. If not provided, secondary logo will be reused.
   */
  alternateLogo: string | Media;
  legal?: {
    copyright?: string | null;
    /**
     * Links to legal information, for example, terms of service or privacy policy
     */
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: string | Page;
            } | null;
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  primaryNavigation?: {
    titles?: string | null;
    menus?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: string | Page;
            } | null;
            url?: string | null;
            label: string;
          };
          id?: string | null;
        }[]
      | null;
  };
  secondaryNavigationList: {
    secondaryNavigation?: {
      titles?: string | null;
      menus?:
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?: {
                relationTo: 'pages';
                value: string | Page;
              } | null;
              url?: string | null;
              label: string;
            };
            id?: string | null;
          }[]
        | null;
    };
    id?: string | null;
  }[];
  connect: {
    /**
     * Text that appears on contact links e.g Stay in Touch
     */
    title: string;
    links?:
      | {
          platform: 'Facebook' | 'Twitter' | 'Instagram' | 'Linkedin' | 'Github' | 'Slack';
          url: string;
          id?: string | null;
        }[]
      | null;
  };
  newsletter: {
    title: string;
    description: string;
    embedCode: string;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug:
          | 'inline'
          | 'createTenantFromAirtable'
          | 'fetchAirtableDocuments'
          | 'downloadDocuments'
          | 'extractDocuments'
          | 'extractPromises'
          | 'uploadToMeedan'
          | 'createPoliticalEntity'
          | 'fetchPromiseStatuses'
          | 'updatePromiseStatus';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        parent?: {
          taskSlug?:
            | (
                | 'inline'
                | 'createTenantFromAirtable'
                | 'fetchAirtableDocuments'
                | 'downloadDocuments'
                | 'extractDocuments'
                | 'extractPromises'
                | 'uploadToMeedan'
                | 'createPoliticalEntity'
                | 'fetchPromiseStatuses'
                | 'updatePromiseStatus'
              )
            | null;
          taskID?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  workflowSlug?: ('airtableWorkflow' | 'meedanStatusesWorkflow') | null;
  taskSlug?:
    | (
        | 'inline'
        | 'createTenantFromAirtable'
        | 'fetchAirtableDocuments'
        | 'downloadDocuments'
        | 'extractDocuments'
        | 'extractPromises'
        | 'uploadToMeedan'
        | 'createPoliticalEntity'
        | 'fetchPromiseStatuses'
        | 'updatePromiseStatus'
      )
    | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  meta?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'documents';
        value: string | Document;
      } | null)
    | ({
        relationTo: 'promises';
        value: string | Promise;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'site-settings';
        value: string | SiteSetting;
      } | null)
    | ({
        relationTo: 'tenants';
        value: string | Tenant;
      } | null)
    | ({
        relationTo: 'partners';
        value: string | Partner;
      } | null)
    | ({
        relationTo: 'political-entities';
        value: string | PoliticalEntity;
      } | null)
    | ({
        relationTo: 'promise-status';
        value: string | PromiseStatus;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  title?: T;
  url?: T;
  docURLs?:
    | T
    | {
        url?: T;
        id?: T;
      };
  files?: T;
  politicalEntity?: T;
  language?: T;
  type?: T;
  airtableID?: T;
  fullyProcessed?: T;
  extractedText?:
    | T
    | {
        text?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promises_select".
 */
export interface PromisesSelect<T extends boolean = true> {
  title?: T;
  document?: T;
  extractions?:
    | T
    | {
        category?: T;
        summary?: T;
        source?: T;
        uniqueId?: T;
        checkMediaId?: T;
        checkMediaURL?: T;
        Status?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  tenant?: T;
  title?: T;
  slug?: T;
  slugLock?: T;
  blocks?:
    | T
    | {
        'act-now'?: T | ActNowBlockSelect<T>;
        newsletter?:
          | T
          | {
              image?: T;
              id?: T;
              blockName?: T;
            };
        partners?:
          | T
          | {
              title?: T;
              partners?: T;
              id?: T;
              blockName?: T;
            };
        'key-promises'?: T | KeyPromisesSelect<T>;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ActNowBlock_select".
 */
export interface ActNowBlockSelect<T extends boolean = true> {
  logo?: T;
  description?: T;
  image?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "KeyPromises_select".
 */
export interface KeyPromisesSelect<T extends boolean = true> {
  title?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  tenants?:
    | T
    | {
        tenant?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  tenant?: T;
  title?: T;
  description?: T;
  primaryLogo?: T;
  secondaryLogo?: T;
  alternateLogo?: T;
  legal?:
    | T
    | {
        copyright?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
      };
  primaryNavigation?:
    | T
    | {
        titles?: T;
        menus?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
      };
  secondaryNavigationList?:
    | T
    | {
        secondaryNavigation?:
          | T
          | {
              titles?: T;
              menus?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        id?: T;
      };
  connect?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              platform?: T;
              url?: T;
              id?: T;
            };
      };
  newsletter?:
    | T
    | {
        title?: T;
        description?: T;
        embedCode?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  locale?: T;
  country?: T;
  airtableID?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners_select".
 */
export interface PartnersSelect<T extends boolean = true> {
  name?: T;
  image?: T;
  links?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  url?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "political-entities_select".
 */
export interface PoliticalEntitiesSelect<T extends boolean = true> {
  tenant?: T;
  name?: T;
  slug?: T;
  slugLock?: T;
  region?: T;
  position?: T;
  image?: T;
  periodFrom?: T;
  periodTo?: T;
  airtableID?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "promise-status_select".
 */
export interface PromiseStatusSelect<T extends boolean = true> {
  label?: T;
  meedanId?: T;
  description?: T;
  colors?:
    | T
    | {
        color?: T;
        textColor?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        parent?:
          | T
          | {
              taskSlug?: T;
              taskID?: T;
            };
        id?: T;
      };
  workflowSlug?: T;
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  meta?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  airtable: {
    airtableAPIKey: string;
    airtableBaseID: string;
  };
  ai: {
    model: 'gemini-2.5-pro' | 'gemini-2.5-flash-lite';
    apiKey: string;
  };
  meedan: {
    meedanAPIKey: string;
    teamId: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs-stats".
 */
export interface PayloadJobsStat {
  id: string;
  stats?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  airtable?:
    | T
    | {
        airtableAPIKey?: T;
        airtableBaseID?: T;
      };
  ai?:
    | T
    | {
        model?: T;
        apiKey?: T;
      };
  meedan?:
    | T
    | {
        meedanAPIKey?: T;
        teamId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs-stats_select".
 */
export interface PayloadJobsStatsSelect<T extends boolean = true> {
  stats?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreateTenantFromAirtable".
 */
export interface TaskCreateTenantFromAirtable {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskFetchAirtableDocuments".
 */
export interface TaskFetchAirtableDocuments {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskDownloadDocuments".
 */
export interface TaskDownloadDocuments {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExtractDocuments".
 */
export interface TaskExtractDocuments {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExtractPromises".
 */
export interface TaskExtractPromises {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskUploadToMeedan".
 */
export interface TaskUploadToMeedan {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskCreatePoliticalEntity".
 */
export interface TaskCreatePoliticalEntity {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskFetchPromiseStatuses".
 */
export interface TaskFetchPromiseStatuses {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskUpdatePromiseStatus".
 */
export interface TaskUpdatePromiseStatus {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WorkflowAirtableWorkflow".
 */
export interface WorkflowAirtableWorkflow {
  input?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "WorkflowMeedanStatusesWorkflow".
 */
export interface WorkflowMeedanStatusesWorkflow {
  input?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}